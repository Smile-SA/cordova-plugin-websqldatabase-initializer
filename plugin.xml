<?xml version="1.0" encoding="UTF-8"?>

<plugin xmlns="http://apache.org/cordova/ns/plugins/1.0"
        id="org.smile.websqldatabase.initializer"
        version="0.0.1">

    <name>WebSqlDatabaseInitializer</name>
    <description>WebSqlDatabase initializer</description>
    <license>Apache 2.0</license>
    <keywords>cordova,websqldatabase,initializer</keywords>

    <!-- android -->
    <platform name="android">
        <source-file target-dir="src/org/smile/websqldatabase" src="src/android/org/smile/websqldatabase/AsyncLoadDatabase.java" />
        <source-file target-dir="src/org/smile/websqldatabase" src="src/android/org/smile/websqldatabase/DatabaseConfig.java" />
        <source-file target-dir="src/org/smile/websqldatabase" src="src/android/org/smile/websqldatabase/DatabaseInitializable.java" />
        <source-file target-dir="src/org/smile/websqldatabase" src="src/android/org/smile/websqldatabase/DatabaseInitializer.java" />
        <info>
            You need to:
            * add "implements DatabaseInitializable" on your main class
            * implement the getDatabaseConfig method (with the correct database configuration)
            * implement the loadWebApp method (with the Cordova init code usually in the onCreate method)
            * remove the Cordova init code in the onCreate method
            * load the database and run the app with "DatabaseInitializer.load(this);" in the onCreate method
            * add the "Databases.db" file in your assets directory
            * add the zipped database to initialize in your assets directory
        </info>
    </platform>

    <!-- ios -->
    <platform name="ios">
        <header-file target-dir="ZipArchive/minizip" src="src/ios/ZipArchive/minizip/crypt.h" />
        <source-file target-dir="ZipArchive/minizip" src="src/ios/ZipArchive/minizip/ioapi.c" />
        <header-file target-dir="ZipArchive/minizip" src="src/ios/ZipArchive/minizip/ioapi.h" />
        <source-file target-dir="ZipArchive/minizip" src="src/ios/ZipArchive/minizip/mztools.c" />
        <header-file target-dir="ZipArchive/minizip" src="src/ios/ZipArchive/minizip/mztools.h" />
        <source-file target-dir="ZipArchive/minizip" src="src/ios/ZipArchive/minizip/unzip.c" />
        <header-file target-dir="ZipArchive/minizip" src="src/ios/ZipArchive/minizip/unzip.h" />
        <source-file target-dir="ZipArchive/minizip" src="src/ios/ZipArchive/minizip/zip.c" />
        <header-file target-dir="ZipArchive/minizip" src="src/ios/ZipArchive/minizip/zip.h" />
        <header-file target-dir="ZipArchive" src="src/ios/ZipArchive/ZipArchive.h" />
        <source-file target-dir="ZipArchive" src="src/ios/ZipArchive/ZipArchive.mm" compiler-flags="-fno-objc-arc" />
        <header-file src="src/ios/DatabaseConfig.h" />
        <source-file src="src/ios/DatabaseConfig.m" />
        <header-file src="src/ios/LoadDatabase.h" />
        <source-file src="src/ios/LoadDatabase.m" />
        <framework src="libz.1.2.5.dylib" weak="true" />
        <info>
            You need to:

            * import "LoadDatabase.h" and "DatabaseConfig.h" in your main class
            * in the init method of your main class, call the "load" method on a "LoadDatabase" object with the correct DatabaseConfig in parameters:
            [[LoadDatabase new] load:[[DatabaseConfig alloc] init:@"myDemoSQLiteDB.zip" secondValue:@"myDemoSQLiteDB.db"]];
            * add the "Databases.db" file in your Resources directory
            * add the zipped database to initialize in your Resources directory
        </info>
    </platform>
</plugin>
